<?php

/**
 * @file
 * Contains er_viewmode.module
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Implements hook_help().
 */
function er_viewmode_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the er_viewmode module.
    case 'help.page.er_viewmode':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Enables you to add a view mode selector per entityreference field') . '</p>';
      return $output;
    break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter for field_ui_field_edit_form.
 */
function er_viewmode_form_field_ui_field_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->get('field');
  if ($field->getType() == 'er_viewmode') {
    $selector_enabled = $field->getThirdPartySetting('er_viewmode', 'view_mode_selector_enabled', false);
    $form['field']['third_party_settings']['er_viewmode'] = array(
      '#type' => 'details',
      '#title' => t('View Mode Selector'),
      '#open' => true,
    );
    $form['field']['third_party_settings']['er_viewmode']['view_mode_selector_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable view mode selector'),
      '#description' => t('Allow selection of view mode per referenced entity'),
      '#default_value' => $selector_enabled,
    );

    // Get entity type
    $entity_type = $field->entity_type;

    // Get all available entity view modes.
    $view_modes = \Drupal::entityManager()->getViewModes($entity_type);

    // Get currently-selected view modes.
    $current_view_modes = $field->getThirdPartySetting('er_viewmode', 'allowed_view_modes', array());

    // Build choices: view modes for the target entity type.
    $mode_choices = array();
      
    foreach ($view_modes as $key => $view_mode) {
      $id = str_replace('.', '__', $view_mode['id']);
      $mode_choices[$id] = t('@entityType - @label', array(
        '@entityType' => $view_mode['targetEntityType'],
        '@label' => $view_mode['label']));
    }
    
    $form['field']['third_party_settings']['er_viewmode']['allowed_view_modes'] = array(
      '#type' => 'checkboxes',
      '#options' => $mode_choices,
      '#title' => t('Select enabled view modes'),
      '#default_value' => $current_view_modes,
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function er_viewmode_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  // Only alter entity reference fields.
  $field_definition = $context['items']->getFieldDefinition();
  $settings = $field_definition->getSettings();
  if ($field_definition->getType() == 'er_viewmode' &&
      $field_definition instanceof ThirdPartySettingsInterface) {
    // Is view mode selection enabled?
    $selector_enabled = $field_definition->getThirdPartySetting('er_viewmode', 'view_mode_selector_enabled', false);
    if ($selector_enabled) {
      $view_modes = $field_definition->getThirdPartySetting('er_viewmode', 'allowed_view_modes', array());
      $enabled_view_modes = array();
      $entity_type = $field_definition->getTargetEntityTypeId();
      foreach($view_modes as $mode_id_key => $enabled) {
        if ($enabled) {
          $enabled_view_modes[$mode_id_key] = str_replace($entity_type . '__', '', $mode_id_key);
        }
      }

      if (count($enabled_view_modes) > 0) {
        // Get the view mode names.
        $all_view_modes = \Drupal::entityManager()->getAllViewModes();
        $view_mode_options = array('full' => t('Default'));
        foreach($enabled_view_modes as $mode_id_key => $mode_id) {
          $view_mode_options[$mode_id] = $all_view_modes[$entity_type][$mode_id]['label'];
        }

        // Get the current item.
        $item = isset($context['items'][$context['delta']]) ? $context['items'][$context['delta']] : NULL;
        $default_view_mode = 'full';
        if (isset($item->view_mode)) {
          $default_view_mode = $item->view_mode;
        }

        // Add the view modes to the field widget.
        $element['view_mode'] = array(
          '#type' => 'select',
          '#title' => t('View Mode'),
          '#title_display' => 'invisible',
          '#options' => $view_mode_options,
          '#default_value' => $default_view_mode,
        );
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function er_viewmode_theme() {
  $theme = [];

  return $theme;
}
